# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "Cent7K8sBase"
  config.vm.box = "surajit-code/Cent7K8sBase"
  config.vm.define  :"k8s-master"
  config.vm.hostname = "k8s-master"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  # config.vm.network "public_network", ip: "192.168.0.100", :netmask => "255.255.255.0", hostname: true
    config.vm.network "public_network", ip: "192.168.29.11", :netmask => "255.255.255.0"
    config.vm.network "private_network", ip: "192.168.33.10"
  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  config.vm.provider "virtualbox" do |vb|
  # vb.gui = true
    vb.memory = 2048
    vb.cpus = 2
  end

  config.vm.provider "vmware_desktop" do |v|
    v.vmx["memsize"] = 4096
    v.vmx["numvcpus"] = 4
  end

  config.vm.provider "hyperv" do |h|
    h.cpus = 4
    h.memory = 4096
  end

  config.vm.provider :libvirt do |libvirt|
    #libvirt.host = "example.com"
    libvirt.cpus = 4
    #libvirt.cpuset = '1-4,^3,6'
    libvirt.cputopology :sockets => '1', :cores => '4', :threads => '1'
    libvirt.memory = 4096
  end

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
    config.vm.provision "shell", inline: <<-SHELL
    ifconfig

    sudo ip route add default via 192.168.29.1
    sudo ip route del default via 10.0.2.2
    sudo echo "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4" > /etc/hosts
    sudo echo "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4" >> /etc/hosts
    sudo echo "192.168.29.11  k8s-master  k8s-master" >> /etc/hosts
    sudo echo "192.168.29.12  k8s-worker-1  k8s-worker-1" >> /etc/hosts

    sudo su -
    cd
    whoami

    systemctl enable docker
    systemctl start docker

    kubeadm init --pod-network-cidr=10.244.0.0/16
    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config

    unzip master.zip
    kubectl apply -f /root/flannel-master/Documentation/kube-flannel.yml
    kubectl -n kube-system get deployment coredns -o yaml | sed 's/allowPrivilegeEscalation: false/allowPrivilegeEscalation: true/g' | kubectl apply -f -

    kubectl apply -f /root/multus-cni/images/multus-daemonset.yml

    kubectl apply -f ./namespace.yaml
    kubectl apply -f ./metallb.yaml
    kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
    cat <<EOF > ./config-l2.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - 192.168.33.100-192.168.33.150
EOF
    kubectl apply -f config-l2.yaml

    echo "You can deploy the worker node now"

    SHELL
end
