# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"
  config.vm.provision "file", source: "./join.sh", destination: "join.sh"
  config.ssh.insert_key = false
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #  config.vm.network "public_network"
  #config.vm.network "public_network"
  #Surajit For this to work, the bridge, say "virbr7" needs to be created manually first
  #config.vm.network "public_network", dev: "virbr7", mode: "bridge", type: "bridge", ip: "10.44.3.191", :netmask => "255.255.240.0"
  #This option works with only ethernet interface on host known
  #config.vm.network "public_network", bridge: 'eno1', dev: 'eno1'
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
    config.vm.provision "shell", inline: <<-SHELL
    sudo yum install net-tools -y
    sudo yum install bind-utils -y
    ifconfig
    sudo su -
    cd
    whoami

    cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
    sysctl --system
    yum install yum-utils device-mapper-persistent-data lvm2 -y
    yum-config-manager --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

    yum install docker-ce-19.03.8-3.el7 -y

    mkdir -p /etc/docker
    cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF

    mkdir -p /etc/systemd/system/docker.service.d
    systemctl daemon-reload

    cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

    yum repolist
    setenforce 0
    sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
    
    yum install kubelet-1.17.4-0 kubeadm-1.17.4-0 kubectl-1.17.4-0 kubernetes-cni-0.7.5-0 -y

    swapoff -a
    sed -i '/swap/d' /etc/fstab 
    mkdir -p /var/lib/kubelet
    echo "KUBELET_KUBEADM_ARGS=\"--cgroup-driver=systemd --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.1\"" > /var/lib/kubelet/kubeadm-flags.env

    yum install wget    -y
    yum install git     -y
    yum install unzip   -y
    yum install sshpass -y
    wget https://github.com/coreos/flannel/archive/master.zip
    git clone https://github.com/intel/multus-cni.git
    wget https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml
    wget https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml

    sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
    systemctl reload sshd

    #dd if=/dev/zero of=/EMPTY bs=1M
    #rm -f /EMPTY

    SHELL
end
